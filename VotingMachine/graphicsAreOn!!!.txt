/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
//#include "Fonts.c"

// #defined constants representing values we write to the graphics 'command' register to get
// it to do something. You will add more values as you add hardware to the graphics chip
// Note DrawHLine, DrawVLine and DrawLine at the moment do nothing - you will modify these

#define DrawHLine		1
#define DrawVLine		2
#define DrawLine		3
#define PutAPixel		0xA
#define GetAPixel		0xB
#define ProgramPaletteColour   	0x10

#define WAIT_FOR_GRAPHICS		while((GraphicsStatusReg & 0x0001) != 0x0001);
#define XRES 800
#define YRES 480


/*******************************************************************************************
 ** This macro pauses until the graphics chip status register indicates that it is idle
 *******************************************************************************************/


//Predefined Colour Values
//Use the symbolic constants below as the values to write to the Colour Register
//When you ask the graphics chip to draw something. These values are also returned
//By the read pixel command

// the header file "Colours.h" contains symbolic names for all 256 colours e.g. RED
// while the source file ColourPaletteData.c contains the 24 bit RGB data
// that is pre-programmed into each of the 256 palettes

#define	BLACK		0
#define	WHITE		1
#define	RED			2
#define	LIME		3
#define	BLUE		4
#define	YELLOW		5
#define	CYAN		6
#define	MAGENTA		7


#define GraphicsCommandReg   		(*(volatile unsigned short int *)(0x84000000))
#define GraphicsStatusReg   		(*(volatile unsigned short int *)(0x84000000))
#define GraphicsX1Reg   		(*(volatile unsigned short int *)(0x84000002))
#define GraphicsY1Reg   		(*(volatile unsigned short int *)(0x84000004))
#define GraphicsX2Reg   		(*(volatile unsigned short int *)(0x84000006))
#define GraphicsY2Reg			(*(volatile unsigned short int *)(0x84000008))
#define GraphicsColourReg		(*(volatile unsigned short int *)(0x8400000E))
#define GraphicsBackGroundColourReg   		(*(volatile unsigned short int *)(0x84000010))

const unsigned short int Font10x14[][14] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0},	 															// ' '
	{0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0,0,0x30,0x30}, 								// '!'
	{0xcc,0xcc,0xcc,0xcc,0,0,0,0,0,0,0,0,0,0}, 													// '"'
	{0xcc,0xcc,0xcc,0xcc,0x3ff,0x3ff,0xcc,0xcc,0x3ff,0x3ff,0xcc,0xcc,0xcc,0xcc},				// '#'
	{0x30,0x30,0xfe,0x1ff,0x3b3,0x3b0,0x1fc,0xfe,0x37,0x337,0x3fe,0x1fc,0x30,0x30},				// '$'
	{0x186,0x3C6,0x3cc,0x18c,0x18,0x18,0x30,0x30,0x60,0x60,0xc6,0xcf,0x18f,0x186}, 				// '%'
	{0xf0,0x1f8,0x30c,0x31c,0x338,0x370,0x1e0,0x1e0,0x373,0x33b,0x31e,0x38e,0x1fb,0xf3}, 		// '&'
	{0x30,0x78,0x38,0x18,0x30,0x60,0,0,0,0,0,0,0,0}, 											// '''
	{0xc,0x3c,0x70,0x60,0xe0,0xc0,0xc0,0xc0,0xc0,0xe0,0x60,0x70,0x3c,0xc}, 						// '('
	{0x60,0x78,0x1c,0xc,0xe,0x6,0x6,0x6,0x6,0xe,0xc,0x1c,0x78,0x60},			// ')'
	{0,0,0x30,0x30,0x333,0x3b7,0x1fe,0xfc,0x3b7,0x333,0x30,0x30,0,0}, 		// '*'
	{0,0,0,0x30,0x30,0x30,0x30,0x3ff,0x3ff,0x30,0x30,0x30,0x30,0}, 		// '+'
	{0,0,0,0,0,0,0,0,0x30,0x78,0x38,0x18,0x30,0x60}, 			// ','
	{0,0,0,0,0,0,0,0x3ff,0x3ff,0,0,0,0,0},			// '-'
	{0,0,0,0,0,0,0,0,0,0,0x30,0x78,0x78,0x30}, 					// '.'
	{0xc,0xc,0x18,0x18,0x30,0x30,0x60,0x60,0xc0,0xc0,0x180,0x180,0x300,0x300} ,			// '/'
	{0xfc,0x1fe,0x387,0x307,0x30f,0x31f,0x33b,0x373,0x3e3,0x3c3,0x383,0x387,0x1fe,0xfc}, // '0'
	{0x30,0x70,0xf0,0xf0,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0xfc,0xfc},	// '1'
	{0xfc,0x1fe,0x387,0x303,0x3,0x7,0xe,0x1c,0x38,0x70,0xe0,0x1c0,0x3ff,0x3ff}, // '2'
	{0xfc,0x1fe,0x387,0x303,0x3,0x3,0x1e,0x1e,0x3,0x3,0x303,0x387,0x1fe,0xfc}, // '3'
	{0xc,0x1c,0x3c,0x7c,0xec,0x1cc,0x38c,0x30c,0x3ff,0x3ff,0xc,0xc,0xc,0xc}, // '4'
	{0x3ff,0x3ff,0x300,0x300,0x3fc,0x3fe,0x7,0x3,0x3,0x3,0x303,0x387,0x1fe,0xfc}, // '5'
	{0xfc,0x1fe,0x387,0x303,0x300,0x300,0x3fc,0x3fe,0x307,0x303,0x303,0x387,0x1fe,0xfc}, // '6'
	{0x3ff,0x3ff,0x3,0x7,0xe,0x1c,0x38,0x30,0x30,0x30,0x30,0x30,0x30,0x30},	// '7'
	{0xfc,0x1fe,0x387,0x303,0x303,0x387,0x1fe,0x1fe,0x387,0x303,0x303,0x387,0x1fe,0xfc}, // '8'
	{0xfc,0x1fe,0x387,0x303,0x303,0x387,0x1ff,0xff,0x7,0xe,0x1c,0x38,0xf0,0xe0}, // '9'
	{0,0,0x30,0x78,0x78,0x30,0,0,0x30,0x78,0x78,0x30,0,0}, // ':'
	{0,0,0x30,0x78,0x78,0x30,0,0,0x30,0x78,0x38,0x18,0x30,0x60}, // ';'
	{0xc,0x1c,0x38,0x70,0xe0,0x1c0,0x380,0x380,0x1c0,0xe0,0x70,0x38,0x1c,0xc}, // '<'
	{0,0,0,0,0x3ff,0x3ff,0,0,0x3ff,0x3ff,0,0,0,0}, // '='
	{0xc0,0xe0,0x70,0x38,0x1c,0xe,0x7,0x7,0xe,0x1c,0x38,0x70,0xe0,0xc0}, // '>'
	{0xfc,0x1fe,0x387,0x303,0x3,0x7,0x1e,0x38,0x30,0x30,0x30,0,0x30,0x30}, // '?'
	{0xfc,0x1fe,0x387,0x303,0x3,0x3,0xf3,0x1f3,0x3b3,0x333,0x333,0x3b7,0x1fe,0xfc}, // '@'
	{0xfc,0x1fe,0x387,0x303,0x303,0x303,0x303,0x3ff,0x3ff,0x303,0x303,0x303,0x303,0x303}, // 'A'
	{0x3fc,0x3fe,0x307,0x303,0x303,0x307,0x3fe,0x3fe,0x307,0x303,0x303,0x307,0x3fe,0x3fc}, // 'B'
	{0xfc,0x1fe,0x387,0x303,0x300,0x300,0x300,0x300,0x300,0x300,0x303,0x387,0x1fe,0xfc}, // 'C'
	{0x3fc,0x3fe,0x307,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x307,0x3fe,0x3fc}, // 'D'
	{0x3ff,0x3ff,0x300,0x300,0x300,0x300,0x3fc,0x3fc,0x300,0x300,0x300,0x300,0x3ff,0x3ff}, // 'E'
	{0x3ff,0x3ff,0x300,0x300,0x300,0x300,0x3fc,0x3fc,0x300,0x300,0x300,0x300,0x300,0x300}, // 'F'
	{0xfc,0x1fe,0x387,0x303,0x300,0x300,0x31f,0x31f,0x303,0x303,0x303,0x387,0x1fe,0xfc}, // 'G'
	{0x303,0x303,0x303,0x303,0x303,0x303,0x3ff,0x3ff,0x303,0x303,0x303,0x303,0x303,0x303}, // 'H'
	{0xfc,0xfc,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0xfc,0xfc}, // 'I'
	{0xff,0xff,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x30c,0x39c,0x1f8,0xf0}, // 'J'
	{0x303,0x307,0x30e,0x31c,0x338,0x3f0,0x3e0,0x3e0,0x3f0,0x338,0x31c,0x30e,0x307,0x303}, // 'K'
	{0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x300,0x3ff,0x3ff}, // 'L'
	{0x303,0x387,0x3cf,0x3ff,0x37b,0x333,0x333,0x333,0x303,0x303,0x303,0x303,0x303,0x303}, // 'M'
	{0x303,0x303,0x303,0x383,0x3c3,0x3e3,0x373,0x33b,0x31f,0x30f,0x307,0x303,0x303,0x303}, // 'N'
	{0xfc,0x1fe,0x387,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x387,0x1fe,0xfc}, // 'O'
	{0x3fc,0x3fe,0x307,0x303,0x303,0x307,0x3fe,0x3fc,0x300,0x300,0x300,0x300,0x300,0x300}, // 'P'
	{0xfc,0x1fe,0x387,0x303,0x303,0x303,0x303,0x303,0x333,0x33b,0x31f,0x38e,0x1ff,0xfb} , // 'Q'
	{0x3fc,0x3fe,0x307,0x303,0x303,0x307,0x3fe,0x3fc,0x378,0x31c,0x306,0x307,0x303,0x303} , // R
	{0xfc,0x1ff,0x383,0x300,0x300,0x380, 0x1fc,0xfe,0x7,0x3,0x3,0x307,0x3fe,0x1fc}, // 'S'
	{0x3ff,0x3ff,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30}, // 'T'
	{0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x387,0x1fe,0xfc}, // 'U'
	{0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x387,0x1ce,0xfc,0x78,0x30}, // 'V'
	{0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x333,0x333,0x37b,0x3ff,0x1fe,0xcc}, // 'W'
	{0x303,0x303,0x303,0x387,0x1ce,0xfc,0x78,0x78,0xfc,0x1ce,0x387,0x303,0x303,0x303}, // 'X'
	{0x303,0x303,0x303,0x303,0x303,0x387,0x1ce,0xfc,0x78,0x30,0x30,0x30,0x30,0x30},	// 'Y'
	{0x3ff,0x3ff,0x3,0x7,0xe,0x1c,0x38,0x70,0xe0,0x1c0,0x380,0x300,0x3ff,0x3ff}, // 'Z'
	{0x7c,0x7c,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x7c,0x7c}, // '['
	{0x180,0x180,0xc0,0xc0,0x60,0x60,0x30,0x30,0x18,0x18,0xc,0xc,0x6,0x6}, // '\'
	{0xf8,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xf8,0xf8}, // ']'
	{0x30,0x78,0xfc,0x1ce,0x387,0x303,0,0,0,0,0,0,0,0}, // '^'
	{0,0,0,0,0,0,0,0,0,0,0,0,0x3ff,0x3ff}, // '_'
	{0xc0,0xe0,0x70,0x38,0x18,0,0,0,0,0,0,0,0,0}, // '`'
	{0,0,0,0,0xfc,0x1fe,0x187,0x3,0xff,0x1ff,0x383,0x383,0x1ff,0xfe}, // 'a'
	{0x300,0x300,0x300,0x300,0x300,0x300,0x3fc,0x3fe,0x307,0x303,0x303,0x307,0x3fe,0x3fc}, // 'b'
	{0,0,0,0,0xfc,0x1fe,0x387,0x303,0x300,0x300,0x303,0x387,0x1fe,0xfc}, // 'c'
	{0x3,0x3,0x3,0x3,0x3,0x3,0xff,0x1ff,0x383,0x303,0x303,0x383,0x1ff,0xff}, // 'd'
	{0,0,0,0,0xfc,0x1fe,0x387,0x303,0x3ff,0x3fe,0x300,0x387,0x1fe,0xfc}, // 'e'
	{0x30,0x78,0xfc,0xcc,0xc0,0xc0,0x1f0,0x1f0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0}, // 'f'
	{0,0,0,0,0xfe,0x1ff,0x383,0x383,0x1ff,0xff,0x3,0x307,0x3fe,0x1fc} , // 'g'
	{0x180,0x180,0x180,0x180,0x180,0x180,0x1fc,0x1fe,0x187,0x183,0x183,0x183,0x183,0x183}, // 'h'
	{0,0,0,0x30,0x30,0,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30}, // 'i'
	{0xc,0xc,0,0,0xc,0xc,0xc,0xc,0xc,0xc,0x30c,0x39c,0x1f8,0xf0}, // 'j'
	{0x180,0x180,0x180,0x180,0x186,0x18e,0x19c,0x1b8,0x1f0,0x1f0,0x1b8,0x19c,0x18e,0x186}, // 'k'
	{0xf0,0xf0,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0xfc,0xfc}, // 'l'
	{0,0,0,0,0x387,0x3cf,0x3ff,0x37b,0x333,0x333,0x303,0x303,0x303,0x303}, // 'm'
	{0,0,0,0,0x33c,0x37e,0x3e7,0x3c3,0x303,0x303,0x303,0x303,0x303,0x303,}, // 'n'
	{0,0,0,0,0xfc,0x1fe,0x387,0x303,0x303,0x303,0x303,0x387,0x1fe,0xfc} , // 'o'
	{0,0,0,0,0x3fc,0x3fe,0x307,0x307,0x3fe,0x3fc,0x300,0x300,0x300,0x300}, // 'p'
	{0,0,0,0,0xff,0x1ff,0x383,0x383,0x1ff,0xff,0x3,0x3,0x3,0x3}, // 'q'
	{0,0,0,0,0x33c,0x37e,0x3e7,0x3c3,0x380,0x300,0x300,0x300,0x300,0x300}, // 'r'
	{0,0,0,0,0xfe,0x1ff,0x383,0x380,0x1fc,0xfe,0x7,0x307,0x3fe,0x1fc}, // 's'
	{0x60,0x60,0x60,0x60,0x1fe,0x1fe,0x60,0x60,0x60,0x60,0x66,0x7e,0x3c,0x18}, // 't'
	{0,0,0,0,0x303,0x303,0x303,0x303,0x303,0x303,0x303,0x387,0x1fe,0xfc}, // 'u'
	{0,0,0,0,0x303,0x303,0x303,0x303,0x303,0x387,0x1ce,0xfc,0x78,0x30}, // 'v'
	{0,0,0,0,0x303,0x303,0x303,0x303,0x333,0x333,0x333,0x3ff,0x1fe,0xcc}, // 'w'
	{0,0,0,0,0x303,0x387,0x1ce,0xfc,0x78,0x78,0xfc,0x1ce,0x387,0x303}, // 'x'
	{0,0,0,0,0x303,0x387,0x1ce,0xfc,0x78,0x30,0x30,0x70,0xe0,0xc0}, // 'y'
	{0,0,0,0,0x3ff,0x3ff,0xe,0x1c,0x38,0x70,0xe0,0x1c0,0x3ff,0x3ff}, // 'z'
	{0x1e,0x3e,0x70,0x60,0x60,0xe0,0x1c0,0x1c0,0xe0,0x60,0x60,0x70,0x3e,0x1e}, // '{'
	{0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30}, // '|'
	{0x1e0,0x1f0,0x38,0x18,0x18,0x1c,0xe,0xe,0x1c,0x18,0x18,0x38,0x1f0,0x1e0}, // '}'
	{0,0,0,0,0,0,0,0xc0,0x333,0xc,0,0,0,0},			// '~'
};

/**********************************************************************
 * This function writes a single pixel to the x,y coords specified in the specified colour
 * Note colour is a palette number (0-255) not a 24 bit RGB value
 **********************************************************************/
void WriteAPixel (int x, int y, int Colour)
{
    WAIT_FOR_GRAPHICS;			// is graphics ready for new command

    GraphicsX1Reg = x;			// write coords to x1, y1
    GraphicsY1Reg = y;
    GraphicsColourReg = Colour;		// set pixel colour with a palette number
    GraphicsCommandReg = PutAPixel;		// give graphics a "write pixel" command
}

/******************************************************************************************************************************
** This function draws a single ASCII character at the coord specified using the colour specified
** OutGraphicsCharFont2(100,100, RED, 'A', TRUE, FALSE, 1, 1) ;	// display upper case 'A' in RED at coords 100,100, erase background
** no scroll, scale x,y= 1,1
**
******************************************************************************************************************************/
void OutGraphicsCharFont2(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
	register int 	row, column, theX = x, theY = y ;
	register int 	pixels ;
	register char 	theColour = colour  ;
	register int 	BitMask, theCharacter = c, theRow, theColumn;


    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
        return ;

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = 14;
		theColumn = 10;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
				if((pixels & BitMask))														// if valid pixel, then write it
					WriteAPixel(theX+column, theY+row, theColour) ;
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase)
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
					// else leave it alone
				}
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}

/*****************************************************************************************
 * This function draws the string provided
 ******************************************************************************************/
void DisplayString (int x, int y, int fg, int bg, char* phrase, int overwrite)
{
    int i = 0;
    while(phrase[i] != '\0') {
        WAIT_FOR_GRAPHICS;      // Is graphics ready for new command?
        OutGraphicsCharFont2(x, y, fg, bg, (int)phrase[i], overwrite);
        i++;
        x += 12;    //width of character
    }
}

int main()
 {
	int i, j;

	// Clear screen
	for (j = 0; j < 480; j++)
		for (i = 0; i < 800; i++)
			WriteAPixel(i, j, BLACK);

	// Draw boxes to hold the candidates
	for (j = 0; j < 480; j++) {
		WriteAPixel(266, j, WHITE);
		WriteAPixel(533, j, WHITE);
	}

	// DELETE THIS IF TEXT IS NOT DISPLAYED UPON RUNNING
	DisplayString(100, 220, WHITE, RED, "CANDIDATE 1", 1);
	DisplayString(350, 220, WHITE, RED, "CANDIDATE 2", 1);
	DisplayString(600, 220, WHITE, RED, "CANDIDATE 3", 1);

	// DELETE THIS IF TEXT DISPLAYS ON THE FIRST TRY
	/*
    OutGraphicsCharFont2(100, 120, WHITE, BLACK, 'C', 1)
    OutGraphicsCharFont2(110, 120, WHITE, BLACK, 'A', 1)
    OutGraphicsCharFont2(120, 120, WHITE, BLACK, 'N', 1)
    OutGraphicsCharFont2(130, 120, WHITE, BLACK, 'D', 1)
    OutGraphicsCharFont2(140, 120, WHITE, BLACK, 'I', 1)
    OutGraphicsCharFont2(150, 120, WHITE, BLACK, 'D', 1)
    OutGraphicsCharFont2(160, 120, WHITE, BLACK, 'A', 1)
    OutGraphicsCharFont2(170, 120, WHITE, BLACK, 'T', 1)
    OutGraphicsCharFont2(180, 120, WHITE, BLACK, 'E', 1)
    OutGraphicsCharFont2(200, 120, WHITE, BLACK, '1', 1)

    OutGraphicsCharFont2(350, 120, WHITE, BLACK, 'C', 1)
    OutGraphicsCharFont2(360, 120, WHITE, BLACK, 'A', 1)
    OutGraphicsCharFont2(370, 120, WHITE, BLACK, 'N', 1)
    OutGraphicsCharFont2(380, 120, WHITE, BLACK, 'D', 1)
    OutGraphicsCharFont2(390, 120, WHITE, BLACK, 'I', 1)
    OutGraphicsCharFont2(400, 120, WHITE, BLACK, 'D', 1)
    OutGraphicsCharFont2(410, 120, WHITE, BLACK, 'A', 1)
    OutGraphicsCharFont2(420, 120, WHITE, BLACK, 'T', 1)
    OutGraphicsCharFont2(430, 120, WHITE, BLACK, 'E', 1)
    OutGraphicsCharFont2(450, 120, WHITE, BLACK, '2', 1)

    OutGraphicsCharFont2(600, 120, WHITE, BLACK, 'C', 1)
    OutGraphicsCharFont2(610, 120, WHITE, BLACK, 'A', 1)
    OutGraphicsCharFont2(620, 120, WHITE, BLACK, 'N', 1)
    OutGraphicsCharFont2(630, 120, WHITE, BLACK, 'D', 1)
    OutGraphicsCharFont2(640, 120, WHITE, BLACK, 'I', 1)
    OutGraphicsCharFont2(650, 120, WHITE, BLACK, 'D', 1)
    OutGraphicsCharFont2(660, 120, WHITE, BLACK, 'A', 1)
    OutGraphicsCharFont2(670, 120, WHITE, BLACK, 'T', 1)
    OutGraphicsCharFont2(680, 120, WHITE, BLACK, 'E', 1)
    OutGraphicsCharFont2(700, 120, WHITE, BLACK, '3', 1)
    */

    return 0;
}
